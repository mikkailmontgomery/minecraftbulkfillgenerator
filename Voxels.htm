<!DOCTYPE html>
<!-- saved from url=(0034)http://mrdoob.com/projects/voxels/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>Voxels</title>

		<style type="text/css">
			body {
				font-family: Monospace;
				font-size: 12px;
				background-color: #f0f0f0;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<script type="text/javascript" src="./Voxels_files/ThreeCanvas.js"></script>
		<script type="text/javascript" src="./Voxels_files/Cube.js"></script>
		<script type="text/javascript" src="./Voxels_files/Plane.js"></script>
		<script type="text/javascript" src="./Voxels_files/main.js"></script>
		<script type="text/javascript">
		/*
		function init()
			function onDocumentKeyDown( event )
			function onDocumentKeyUp( event )
			function onDocumentMouseDown( event )
			function onDocumentMouseMove( event )
			function onDocumentMouseUp( event )
			function onDocumentMouseWheel( event )
			function setBrushColor( value )
			function buildMCsetblockFromHash()
			function buildFromHash()
			function updateHash()
			function offsetScene( x, z )
			function interact()
			function render()
			function save()
			function clear()
			function decode( string )
			*/
			var clicks = 0;
			var click1 = {x:0,y:0,Z:0};
			var click2 = {x:0,y:0,Z:0};
			var click3 = {x:0,y:0,Z:0};
			interact = function () {

				if ( objectHovered ) {

					objectHovered.material[ 0 ].color.a = 1;
					objectHovered.material[ 0 ].color.updateStyleString();
					objectHovered = null;

				}

				var position, intersect, intersects = ray.intersectScene( scene );

				if ( intersects.length > 0 ) {

					intersect = intersects[ 0 ].object != brush ? intersects[ 0 ] : intersects[ 1 ];

					if ( intersect ) {

						if ( isShiftDown ) {

							if ( intersect.object != plane ) {

								objectHovered = intersect.object;
								objectHovered.material[ 0 ].color.a = 0.5;
								objectHovered.material[ 0 ].color.updateStyleString();

								return;

							}

						} else {

							position = new THREE.Vector3().add( intersect.point, intersect.object.matrixRotation.transform( intersect.face.normal.clone() ) );

							brush.position.x = Math.floor( position.x / 50 ) * 50 + 25;
							brush.position.y = Math.floor( position.y / 50 ) * 50 + 25;
							brush.position.z = Math.floor( position.z / 50 ) * 50 + 25;
							//console.log(brush);
							if (clicks == 1){
								/*
								psudocode:
								calculate the distance between the first click position and current mouse position.
								check if mouse is less then first click position
								if greater, then click1 - mouse then add 50(incase it results in 0).
								this is the cube size.  Do this for x and z.

								calculate the center location of where to draw the cube.
								if the first click position is less then the mouse position
								then divid the cube by 50 to get the nuber of blocks.
								Multiply the number of blocks by 25 and remove 25 from the result.
								This is the center or brush position.  if the cube is only 1 square(50) then the center is the first click position.

								*/

								//console.log(brush.position,click1)
								var cx = click1.x > brush.position.x ? click1.x - brush.position.x : brush.position.x - click1.x;
								var cy = 50;//Math.abs(click1.y) > Math.abs(brush.position.y) ? Math.abs(click1.y) - Math.abs(brush.position.y) : Math.abs(brush.position.y) - Math.abs(click1.y);
								var cz = click1.z > brush.position.z ? click1.z - brush.position.z : brush.position.z - click1.z;
									cx += 50;
									cy = cy;
									cz += 50;
								//console.log(brush.position,click1,cx / 50,cz / 50)
								brush.geometry = new Cube(cx,cy,cz);
								if(click1.x <= brush.position.x){
									brush.position.x = click1.x + (cx == 50 ? 0: (Math.floor(cx / 50) * 25)-25);
							  }else{brush.position.x = click1.x-((cx == 50 ? 0: (Math.floor(cx / 50) * 25)-25))}
								brush.position.y = 25;
								if(click1.z <= brush.position.z){
									brush.position.z = click1.z + (cz == 50 ? 0: (Math.floor(cz / 50) * 25)-25);
								}else{brush.position.z = click1.z-( (cz == 50 ? 0: (Math.floor(cz / 50) * 25)-25))}

								//console.log("Math.abs(click1.z)",click1.z, "- brush.position.z",brush.position.z," + 50",Math.abs(click1.z) - brush.position.z + 50,"=cz",cz + 50, cz / 50, (cz /50) *25,((cz /50) *25)-25,click1.z-(((cz /50) *25)-25))
							}
							return;

						}

					}

				}

				brush.position.y = 2000;
				render();
			}

			function onDocumentMouseUpmodded( event ) {

				event.preventDefault();
				clicks = clicks < 1 ? 1 : 0;

				isMouseDown = false;

				onMouseDownPosition.x = event.clientX - onMouseDownPosition.x;
				onMouseDownPosition.y = event.clientY - onMouseDownPosition.y;

				if ( onMouseDownPosition.length() > 5 ) {

					return;

				}

				var intersect, intersects = ray.intersectScene( scene );

				if ( intersects.length > 0 ) {

					intersect = intersects[ 0 ].object == brush ? intersects[ 1 ] : intersects[ 0 ];

					if ( intersect ) {

						if ( isShiftDown ) {

							if ( intersect.object != plane ) {

								scene.removeObject( intersect.object );

							}

						} else {
							console.log(clicks);
							if(clicks == 0){
								var position = new THREE.Vector3().add( intersect.point, intersect.object.matrixRotation.transform( intersect.face.normal.clone() ) );

								var voxel = new THREE.Mesh( cube, new THREE.MeshColorFillMaterial( colors[ color ] ) );
								voxel.position.x = Math.floor( position.x / 50 ) * 50 + 25;
								voxel.position.y = Math.floor( position.y / 50 ) * 50 + 25;
								voxel.position.z = Math.floor( position.z / 50 ) * 50 + 25;
								voxel.overdraw = true;
								scene.addObject( voxel );
							}else{
								click1.x = brush.position.x
								click1.y = brush.position.y
								click1.z = brush.position.z
								console.log(click1);
							}

						}

					}

				}

				updateHash();
				interact();
				render();

			}
							document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
							document.addEventListener( 'mouseup', onDocumentMouseUpmodded, false );

		</script>
		<!--Its all one line!-->
		<div><div style="position: absolute; top: 5px; width: 100%; text-align: center;">
			<span style="color: #444; background-color: #fff; border-bottom: 1px solid #ddd; padding: 8px 10px; text-transform: uppercase;">
				<strong>0 - 9</strong>: colors, <strong>click</strong>: add voxel, <strong>shift + click</strong>: remove voxel, <strong>drag</strong>: rotate |
				<a id="link" href="http://mrdoob.com/projects/voxels/" target="_blank">share</a> <a href="javascript:save();">save</a> <a href="javascript:clear();">clear</a>
			<a href="javascript:buildMCsetblockFromHash();">GetCommands</a></span>
		</div><canvas width="1680" height="494"></canvas></div>



</body></html>
